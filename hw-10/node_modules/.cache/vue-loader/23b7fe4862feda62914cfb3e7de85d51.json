{"remainingRequest":"/home/tycoon/Documents/y2019/web/hw/hw-10/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/tycoon/Documents/y2019/web/hw/hw-10/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/tycoon/Documents/y2019/web/hw/hw-10/src/App.vue","mtime":1608288875468},{"path":"/home/tycoon/Documents/y2019/web/hw/hw-10/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tycoon/Documents/y2019/web/hw/hw-10/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/tycoon/Documents/y2019/web/hw/hw-10/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/tycoon/Documents/y2019/web/hw/hw-10/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/tycoon/Documents/y2019/web/hw/hw-10/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojYXBwIHsKCn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;;AAEA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :userId=\"userId\" :users=\"users\"/>\n        <Middle :postsAndComments=\"postsAndComments\" :users=\"users\"/>\n        <Footer :userCount=\"Object.keys(users).length\" :postCount=\"Object.keys(posts).length\"/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header\n    },\n    data: function () {\n        return this.$root.$data;\n    },\n    computed: {\n        postsAndComments: function () {\n            return Object.values(this.posts).map((post) => ({\n                post: post,\n                comments: Object.values(this.comments).filter(c => c.postId === post.id)\n            }))\n        }\n    },\n    beforeCreate() {\n        this.$root.$on(\"onEnter\", (login, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n                return;\n            }\n\n            const users = Object.values(this.users).filter(u => u.login === login);\n            if (users.length === 0) {\n                this.$root.$emit(\"onEnterValidationError\", \"No such user\");\n            } else {\n                this.userId = users[0].id;\n                this.$root.$emit(\"onChangePage\", \"Index\");\n            }\n        });\n\n        this.$root.$on(\"onLogout\", () => this.userId = null);\n\n        this.$root.$on(\"onWritePost\", (title, text) => {\n            if (this.userId) {\n                if (!title || title.length < 5) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n                } else if (!text || text.length < 10) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n                } else {\n                    const id = Math.max(...Object.keys(this.posts)) + 1;\n                    this.$root.$set(this.posts, id, {\n                        id, title, text, userId: this.userId\n                    });\n                    this.$root.$emit(\"onChangePage\", \"Index\");\n                }\n            } else {\n                this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n            }\n        });\n\n        this.$root.$on(\"onEditPost\", (id, text) => {\n            if (this.userId) {\n                if (!id) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"ID is invalid\");\n                } else if (!text || text.length < 10) {\n                    this.$root.$emit(\"onEditPostValidationError\", \"Text is too short\");\n                } else {\n                    let posts = Object.values(this.posts).filter(p => p.id === parseInt(id));\n                    if (posts.length) {\n                        posts.forEach((item) => {\n                            item.text = text;\n                        });\n                    } else {\n                        this.$root.$emit(\"onEditPostValidationError\", \"No such post\");\n                    }\n                }\n            } else {\n                this.$root.$emit(\"onEditPostValidationError\", \"No access\");\n            }\n        });\n\n        this.$root.$on(\"onRegister\", (login, name) => {\n            if (!login || login.length < 3 || login.length > 16) {\n                this.$root.$emit(\"onRegisterValidationError\", \"login length must be 3-16 letters\");\n            } else if (login.match(\"[^a-z]\")) {\n                this.$root.$emit(\"onRegisterValidationError\", \"login must contain only lowercase latin letters\");\n            } else if (Object.values(this.users).filter(u => u.login === login).length !== 0) {\n                this.$root.$emit(\"onRegisterValidationError\", \"login is already in use\");\n            } else if (!name || name.length < 1 || name.length > 32) {\n                this.$root.$emit(\"onRegisterValidationError\", \"name length must be 1-32 letters\");\n            } else {\n                const id = Math.max(...Object.keys(this.users)) + 1;\n                this.$root.$set(this.users, id, {\n                    id, login, name, admin: false\n                });\n                this.$root.$emit(\"onChangePage\", \"Enter\");\n            }\n        })\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"]}]}