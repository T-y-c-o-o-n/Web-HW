package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.Article;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.ArticleRepository;

import java.sql.*;
import java.util.List;

public class ArticleRepositoryImpl extends BasicRepositoryImpl<Article> implements ArticleRepository {
    public ArticleRepositoryImpl() {
        super("Article");
    }

    @Override
    protected Article getNewInstance() {
        return new Article();
    }

    @Override
    public List<Article> findAllByUserId(long userId) {
        return findAllByKeys(new Pair("userId", userId));
    }

    @Override
    public void updateHidden(long id, boolean hidden) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("UPDATE `Article` SET `hidden`=? WHERE `id`=?",
                    Statement.NO_GENERATED_KEYS)) {
                statement.setBoolean(1, hidden);
                statement.setLong(2, id);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't update Article.");
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't update Article.", e);
        }
    }

    @Override
    public void save(Article article) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `Article` " +
                    "(`userId`, `title`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())", Statement.RETURN_GENERATED_KEYS)) {
                statement.setLong(1, article.getUserId());
                statement.setString(2, article.getTitle());
                statement.setString(3, article.getText());
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save Article.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        article.setId(generatedKeys.getLong(1));
                        article.setCreationTime(find(article.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save Article [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Article.", e);
        }
    }
}
